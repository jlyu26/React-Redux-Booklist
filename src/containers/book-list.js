import React, { Component } from 'react';
import { connect } from 'react-redux'

class BookList extends Component {
	renderList() {
		return this.props.books.map((book) => {
			return (
				<li key={book.title} className="list-group-item">{book.title}</li>
			);
		});
	}

	render() {
		// console.log(this.props.books); // -> `state.books` from mapStateToProps(state)
		return (
			<ul className="list-group col-sm-4">
				{this.renderList()}
			</ul>
		)
	}
}

// To inject application state into BookList component as `this.props.books`:
// This "state function" is the glue between React and Redux
// It takes application state object (which is generated by reducer functions) as an argument
function mapStateToProps(state) {
	// Whatever is returned here will be available to component BookList as `this.props`
	return {
		books: state.books	// Because BookReducer is returning `books` property, the array of objects (in index.js)
	};
}
// 1. Whenever application state changes, the container/component will automatically rerender
// 2. And whenever application state changes, the object in the state function will be addigned as props to the component

// connect()() takes a function and a component, and produces a container
export default connect(mapStateToProps)(BookList);