import React, { Component } from 'react';
import { connect } from 'react-redux';
import { selectBook } from '../actions/index';
import { bindActionCreators } from 'redux';

class BookList extends Component {
	renderList() {
		return this.props.books.map((book) => {
			return (
				<li 
					key={book.title}
					onClick={() => this.props.selectBooks(book)} 
					className="list-group-item">
					{book.title}
				</li>
			);
		});
	}

	render() {
		// console.log(this.props.books); // -> `state.books` from mapStateToProps(state)
		return (
			<ul className="list-group col-sm-4">
				{this.renderList()}
			</ul>
		)
	}
}

// To inject application state into BookList component as `this.props.books`:
// This "state function" is the glue between React and Redux
// It takes application state object (which is generated by reducer functions) as an argument
function mapStateToProps(state) {
	console.log('State from book-list container: ', state);
	// Whatever is returned here will be available to component BookList as `this.props`
	return {
		books: state.books	// Because BookReducer is returning `books` property, the array of objects (in index.js)
	};
}
// 1. Whenever application state changes, the container/component will automatically rerender
// 2. And whenever application state changes, the object in the state function will be addigned as props to the component

// Anything returned from this function will end ups as `props` on BookList container
function mapDispatchToProps(dispatch) {
	// Whenever selectBook is called, the result should be passed to all reducers
	return bindActionCreators({ selectBooks: selectBook }, dispatch);
}

// connect()() takes a function and a component, and produces a container
// it needs to know about this new dispatch method, selectBook.
// Make is available as a prop.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);